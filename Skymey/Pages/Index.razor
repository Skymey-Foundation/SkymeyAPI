@page "/"
@using SkymeyLib.Models.Crypto
@using SkymeyLib.Models.Crypto.CryptoInstruments
@inject IHttpService httpService
@inject INameService nameSerivce

<PageTitle>@nameSerivce.Index | @nameSerivce.Title</PageTitle>

@if (crypto_tickers == null)
{
    <table class="table custom-table mt-4">
        <thead>
            <tr class="TickerTr">
                <td scope="col" class="trRank">Rank</td>
                <td scope="col"></td>
                <td scope="col">Asset</td>
                <td scope="col">Price</td>
                <td scope="col">24h%</td>
                <td scope="col">Market Cap</td>
                <td scope="col">FDV</td>
                <td scope="col">Supply %</td>
            </tr>
        </thead>
        <tbody>
                <tr scope="row" class="TickerTr">
                    <td></td>
                <td class="tdImage"></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
        </tbody>
    </table>
}
else
{
    <table class="table custom-table mt-4">
        <thead>
            <tr class="TickerTr">
                <td scope="col" class="trRank">Rank</td>
                <td scope="col"></td>
                <td scope="col">Asset</td>
                <td scope="col">Price</td>
                <td scope="col">24h%</td>
                <td scope="col">Market Cap</td>
                <td scope="col">FDV</td>
                <td scope="col">Supply %</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in crypto_tickers)
            {
                <tr scope="row" class="TickerTr">
                    <td>
                        1
                    </td>
                    <td class="tdImage">
                        @{
                            item.Symbol = item.Symbol + ".png";
                        }
                        <NavLink class="nav-link p-0" href="fetchdata">
                            <img src="/images/crypto/@item.Symbol" height="40" width="40" title="@item.Name" alt="@item.Name" onerror="this.onerror=null; this.src='/images/crypto/btc.png'"/>
                        </NavLink>
                    </td>
                    <td>
                        <NavLink class="nav-link p-0" href="fetchdata">
                        <div class="TickerName">@item.Name</div>
                        <div class="TickerTicker">@item.Symbol.Replace(".png", "")</div>
                        </NavLink>
                    </td>
                    <td>
                        @Math.Round((from i in crypto_prices where i.Ticker == item.Symbol.Replace(".png", "") + "USDT" select i.Price).FirstOrDefault(), 3)
                    </td>
                    <td>
                    135324
                    </td>
                    <td>
                    200000000
                    </td>
                    <td>
                    210000000
                    </td>
                    <td>
                    93.75%
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private CryptoInstrumentsDB[]? crypto_tickers;
    private CryptoActualPricesView[]? crypto_prices;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            crypto_tickers = await httpService.Get<CryptoInstrumentsDB[]>("https://localhost:5003/api/Crypto/GetInstruments");
            crypto_prices = await httpService.Get<CryptoActualPricesView[]>("https://localhost:5003/api/Crypto/GetActualPrices");
            crypto_tickers = (from i in crypto_tickers orderby i.Rank ascending select i).Skip(0).Take(100).ToArray();
            Console.WriteLine((from i in crypto_prices where i.Ticker == "LTC" + "USDT" select i.Price).FirstOrDefault());
            StateHasChanged();
        }
    }
}