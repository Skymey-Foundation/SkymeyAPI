@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Security.Claims
@using System.Net.Http.Headers
@inherits LayoutComponentBase
@inject ProtectedLocalStorage localStorage
@inject HttpClient http
@inject ProtectedSessionStorage sessionStorage
@inject IAuthenticationService _AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IHttpService httpService
<PageTitle>Skymey</PageTitle>

<div class="container-fluid">
        <div class="row">
            <header class="col p-0">
                <div class="top-row">
                    <div class="col-6 col-sm-4 col-md-3 col-lg-3 col-xl-3 col-xxl-2 ps-3 ps-xl-3">
                        <a class="navbar-brand" href=""><img src="/images/logo.png" height="40" width="50" alt="Skymey" title="Skymey" /> Skymey</a>
                    </div>
                <div class="col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 offset-xxl-1 search">
                    <div class="input-group login-form text-center col">
                        <span class="input-group-text" id="basic-addon1">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="Search" aria-label="Search" aria-describedby="basic-addon1">
                    </div>
                    </div>
                <AuthorizeView>
                    <div class="pe-4 pe-xl-0 col-6 col-sm-2 col-md-3 col-lg-3 col-xl-2 col-xxl-2 @is_visible">
                        <div class="coin-stats float-end d-flex">
                            @* <div class="coins px-3 align-items-center d-flex text-center" data-bs-toggle="tooltip" title="SKY token. Perform actions and earn rewards!">
                                <span class="pe-2">123</span><img src="/images/logo.png" height="24" width="30" alt="Skymey coins" />
                            </div> *@
                            <div class="logout  text-center">
                                <a href="#" @onclick="Logout" title="Sign out" class="border-0 text-center exit" type="button" name="logout"><i class="bi bi-box-arrow-left"></i></a>
                            </div>
                        </div><!-- HTML to write -->
                    </div>
</AuthorizeView>
            </div>
            </header>
        </div>
    </div>
<div class="container-fluid">
        <div class="row">
        <div class="col-12 col-lg-3 col-xl-2 col-xxl-2 p-0">
            <NavMenu is_visible="@is_visible"/>
        </div>
        <main class="content px-4 px-xl-0 p-0 pb-4 pt-2 col-xs-10 offset-xs-1 col-lg-9 offset-lg-0 col-xl-8 offset-xl-1 col-xxl-8 offset-xxl-1">
            @Body
        </main>
    </div>
</div>
<footer class="container-fluid">
    <div class="row">
        <div class="col-12 col-sm-3 col-md-3 col-lg-3 col-xl-2 d-none d-lg-block p-0 m-0">
            <div class="footser-sidebar"></div>
        </div>
        <div class="px-4 px-xl-0 p-0 pb-4 pt-2 col-xs-10 offset-xs-1 col-lg-9 offset-lg-0 col-xl-8 offset-xl-1 col-xxl-8 offset-xxl-1">
            <div class="dropdown-divider"></div>
            <div class="mt-4">
                <div class="float-start">
                © @DateTime.Now.Year Skymey
                </div>
                <div class="float-end">
                    <a href="#" title="Skymey Telegram" class="p-2"><i class="bi bi-telegram"></i></a>
                    <a href="#" title="Skymey Twitter" class="p-2"><i class="bi bi-twitter-x"></i></a>
                </div>
            </div>
        </div>
    </div>
</footer>
    
@code {
    private string is_visible { get; set; } = "d-none";
    private async Task Logout()
    {
        Console.WriteLine("logout");
        await sessionStorage.SetAsync("Token", "");
        await localStorage.SetAsync("RefreshToken", "");
        await AuthenticationService.Logout();
        NavigationManager.NavigateTo("/", true);
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_AuthenticationService.User == null)
        {
            Console.WriteLine("User null");
            Console.WriteLine("Login");
            await _AuthenticationService.Initialize();
            if (firstRender)
            {
                if (_AuthenticationService.User != null)
                {
                    if (_AuthenticationService.User.Token != null)
                    {
                        await httpService.CheckJwt(new User { Email = _AuthenticationService.User.Email, Token = _AuthenticationService.User.Token, RefreshToken = _AuthenticationService.User.RefreshToken });
                        await _AuthenticationService.Initialize();
                        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(_AuthenticationService.User.Email);
                        await AuthenticationService.Login(new User { Email = _AuthenticationService.User.Email, Token = _AuthenticationService.User.Token, RefreshToken = _AuthenticationService.User.RefreshToken });
                        http.DefaultRequestHeaders.Remove("Authorization");
                        http.DefaultRequestHeaders.Add("Authorization", $"Bearer {_AuthenticationService.User.Token}");
                        await sessionStorage.SetAsync("Token", _AuthenticationService.User.Token);
                        await localStorage.SetAsync("RefreshToken", _AuthenticationService.User.RefreshToken);
                        Console.WriteLine(_AuthenticationService.User.RefreshToken);
                        is_visible = "d-block";
                        StateHasChanged();
                    }
                    else
                    {
                        await Logout();
                    }
                }
                else
                {
                    is_visible = "d-block";
                    StateHasChanged();
                }
            }
        }
        else
        {
            if (firstRender)
            {
                Console.WriteLine("User not null");
                await httpService.CheckJwt(new User { Email = _AuthenticationService.User.Email, Token = _AuthenticationService.User.Token, RefreshToken = _AuthenticationService.User.RefreshToken });
                await _AuthenticationService.Initialize();
                await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(_AuthenticationService.User.Email);
                await AuthenticationService.Login(new User { Email = _AuthenticationService.User.Email, Token = _AuthenticationService.User.Token, RefreshToken = _AuthenticationService.User.RefreshToken });
                await sessionStorage.SetAsync("Token", _AuthenticationService.User.Token);
                await localStorage.SetAsync("RefreshToken", _AuthenticationService.User.RefreshToken);
                Console.WriteLine(_AuthenticationService.User.RefreshToken);
                StateHasChanged();
            }
        }
    }
                                }